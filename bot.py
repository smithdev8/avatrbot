import os
import asyncio
import logging
from typing import Dict, List, Optional
from datetime import datetime
import json
import aiohttp
from io import BytesIO

# Telegram imports
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

# Replicate import
import replicate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    CHOOSING_MODE,
    UPLOADING_INSTANT,
    UPLOADING_LORA,
    SELECTING_STYLE,
    GENERATING
) = range(5)

# –°—Ç–∏–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
STYLES = {
    "cyberpunk": {
        "name": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
        "prompt": "cyberpunk style, neon lights, futuristic, tech wear, holographic effects",
        "negative": "boring, plain, old-fashioned"
    },
    "anime": {
        "name": "üéå –ê–Ω–∏–º–µ",
        "prompt": "anime style, manga art, cel shading, vibrant colors, large expressive eyes",
        "negative": "realistic, photographic, western cartoon"
    },
    "fantasy": {
        "name": "üßô –§—ç–Ω—Ç–µ–∑–∏",
        "prompt": "fantasy art, magical, ethereal, mystical lighting, epic character",
        "negative": "modern, mundane, ordinary"
    },
    "superhero": {
        "name": "ü¶∏ –°—É–ø–µ—Ä–≥–µ—Ä–æ–π",
        "prompt": "superhero style, dynamic pose, dramatic lighting, powerful, comic book art",
        "negative": "weak, ordinary, civilian clothes"
    },
    "portrait": {
        "name": "üé® –ê—Ä—Ç-–ø–æ—Ä—Ç—Ä–µ—Ç",
        "prompt": "artistic portrait, professional lighting, high quality, masterpiece",
        "negative": "amateur, low quality, blurry"
    }
}

class AvatarBot:
    def __init__(self, telegram_token: str, replicate_token: str):
        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        self.telegram_token = telegram_token.strip()
        replicate_token = replicate_token.strip()
        os.environ["REPLICATE_API_TOKEN"] = replicate_token
        self.user_data: Dict = {}
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
        user = update.effective_user
        
        keyboard = [
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (Instant ID)", callback_data="mode_instant")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∫—Ä—É—Ç—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å —Ç–≤–æ–∏–º –ª–∏—Ü–æ–º! üé®\n\n"
            "‚ö° **–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º** - –∑–∞–≥—Ä—É–∑–∏ 1 —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –º–∏–Ω—É—Ç—É\n\n"
            "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:"
        )
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        return CHOOSING_MODE
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = (
            "ü§ñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è'\n"
            "2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
            "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –õ–∏—Ü–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ\n\n"
            "/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def mode_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "help":
            help_text = (
                "‚ÑπÔ∏è **–û —Ä–µ–∂–∏–º–µ:**\n\n"
                "**–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º:**\n"
                "‚Ä¢ –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ñ–æ—Ç–æ\n"
                "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞ 30-60 —Å–µ–∫—É–Ω–¥\n"
                "‚Ä¢ –•–æ—Ä–æ—à–æ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫"
            )
            await query.edit_message_text(help_text, parse_mode='Markdown')
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING_MODE
            
        elif query.data == "back_to_start":
            keyboard = [
                [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (Instant ID)", callback_data="mode_instant")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
            ]
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING_MODE
            
        elif query.data == "mode_instant":
            context.user_data['mode'] = 'instant'
            context.user_data['photos'] = []
            
            await query.edit_message_text(
                "‚ö° **–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–Ω–æ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞.\n"
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                "‚Ä¢ –§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∫—É—Ä—Å\n"
                "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞",
                parse_mode='Markdown'
            )
            return UPLOADING_INSTANT
    
    async def handle_instant_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è Instant ID"""
        try:
            photo = update.message.photo[-1]
            file = await photo.get_file()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            photo_bytes = BytesIO()
            await file.download_to_memory(photo_bytes)
            photo_bytes.seek(0)
            
            context.user_data['photos'] = [photo_bytes]
            
            await update.message.reply_text(
                "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
                reply_markup=self._get_styles_keyboard()
            )
            
            return SELECTING_STYLE
        except Exception as e:
            logger.error(f"Error handling photo: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n/start"
            )
            return ConversationHandler.END
    
    def _get_styles_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å—Ç–∏–ª—è–º–∏"""
        keyboard = []
        for style_id, style_info in STYLES.items():
            keyboard.append([InlineKeyboardButton(
                style_info['name'],
                callback_data=f"style_{style_id}"
            )])
        return InlineKeyboardMarkup(keyboard)
    
    async def handle_style_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        style_id = query.data.replace("style_", "")
        context.user_data['selected_style'] = style_id
        style_info = STYLES[style_id]
        
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style_info['name']}\n\n"
            "üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...\n"
            "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30-60 —Å–µ–∫—É–Ω–¥..."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        return await self._generate_instant_id(update, context)
    
    async def _generate_instant_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Instant ID"""
        try:
            style_id = context.user_data['selected_style']
            style_info = STYLES[style_id]
            photo = context.user_data['photos'][0]
            
            # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –≤ BytesIO
            photo.seek(0)
            
            logger.info(f"Starting generation for style: {style_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
            # photomaker —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –¥–ª—è –Ω–∞—á–∞–ª–∞
            output = replicate.run(
                "tencentarc/photomaker:ddfc2b08d209f9fa8c1eca692712918bd449f695dabb4a958da31802a9570fe4",
                input={
                    "prompt": f"person, {style_info['prompt']}, high quality portrait",
                    "num_steps": 20,
                    "style_name": "Photographic",
                    "input_image": photo,
                    "guidance_scale": 5,
                    "negative_prompt": style_info['negative']
                }
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if output and len(output) > 0:
                result_url = output[0] if isinstance(output, list) else output
                
                await update.callback_query.message.reply_photo(
                    photo=result_url,
                    caption=f"‚ú® –í–∞—à –∞–≤–∞—Ç–∞—Ä –≤ —Å—Ç–∏–ª–µ {style_info['name']} –≥–æ—Ç–æ–≤!\n\n"
                           f"–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                )
                
                logger.info("Generation completed successfully")
            else:
                raise Exception("No output from model")
            
        except Exception as e:
            logger.error(f"Error in Instant ID generation: {e}")
            error_message = str(e)
            
            # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if "billing" in error_message.lower():
                error_text = "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ Replicate"
            elif "api" in error_message.lower():
                error_text = "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å API —Ç–æ–∫–µ–Ω–æ–º Replicate"
            else:
                error_text = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_message[:100]}"
            
            await update.callback_query.message.reply_text(
                f"{error_text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏."
            )
        
        return ConversationHandler.END
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        return ConversationHandler.END
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            application = Application.builder().token(self.telegram_token).build()
            
            # –°–æ–∑–¥–∞–µ–º ConversationHandler —Å per_message=True —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            conv_handler = ConversationHandler(
                entry_points=[CommandHandler("start", self.start)],
                states={
                    CHOOSING_MODE: [
                        CallbackQueryHandler(self.mode_selection)
                    ],
                    UPLOADING_INSTANT: [
                        MessageHandler(filters.PHOTO, self.handle_instant_photo)
                    ],
                    SELECTING_STYLE: [
                        CallbackQueryHandler(self.handle_style_selection)
                    ]
                },
                fallbacks=[CommandHandler("cancel", self.cancel)],
                per_message=True  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(conv_handler)
            application.add_handler(CommandHandler("help", self.help_command))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("Starting bot polling...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            
        except Exception as e:
            logger.error(f"Failed to start bot: {e}")
            raise

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
if __name__ == "__main__":
    import sys
    from dotenv import load_dotenv
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –æ—á–∏—â–∞–µ–º –∏—Ö –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
    REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN", "").strip()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    TELEGRAM_BOT_TOKEN = ''.join(c for c in TELEGRAM_BOT_TOKEN if c.isprintable())
    REPLICATE_API_TOKEN = ''.join(c for c in REPLICATE_API_TOKEN if c.isprintable())
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    if not TELEGRAM_BOT_TOKEN or not REPLICATE_API_TOKEN:
        logger.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ REPLICATE_API_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ Telegram (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞: 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11)
    if ':' not in TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_BOT_TOKEN!")
        logger.error("–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ':' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz)")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot = AvatarBot(TELEGRAM_BOT_TOKEN, REPLICATE_API_TOKEN)
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
        logger.info(f"‚úÖ Telegram Token: ...{TELEGRAM_BOT_TOKEN[-10:]}")
        logger.info(f"‚úÖ Replicate Token: ...{REPLICATE_API_TOKEN[-10:]}")
        
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
