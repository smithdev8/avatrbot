import os
import asyncio
import logging
from typing import Dict, List, Optional
from datetime import datetime
import json
import time
from io import BytesIO
import base64

# Telegram imports
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

# Replicate import
import replicate
from replicate.exceptions import ReplicateError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    CHOOSING_MODE,
    UPLOADING_INSTANT,
    UPLOADING_LORA,
    SELECTING_STYLE,
    GENERATING,
    WAITING_LORA
) = range(6)

# –°—Ç–∏–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
STYLES = {
    "cyberpunk": {
        "name": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
        "prompt": "cyberpunk style, neon lights, futuristic city, tech wear, holographic",
        "negative": "boring, plain, old-fashioned",
        "photomaker_style": "Neonpunk"
    },
    "anime": {
        "name": "üéå –ê–Ω–∏–º–µ",
        "prompt": "anime style, manga art, vibrant colors, expressive",
        "negative": "realistic, photographic",
        "photomaker_style": "Comic book"
    },
    "fantasy": {
        "name": "üßô –§—ç–Ω—Ç–µ–∑–∏",
        "prompt": "fantasy art, magical, ethereal, mystical lighting",
        "negative": "modern, mundane",
        "photomaker_style": "Fantasy art"
    },
    "superhero": {
        "name": "ü¶∏ –°—É–ø–µ—Ä–≥–µ—Ä–æ–π",
        "prompt": "superhero style, dynamic pose, dramatic lighting, powerful",
        "negative": "weak, ordinary",
        "photomaker_style": "Cinematic"
    },
    "portrait": {
        "name": "üé® –ê—Ä—Ç-–ø–æ—Ä—Ç—Ä–µ—Ç",
        "prompt": "artistic portrait, professional lighting, masterpiece",
        "negative": "amateur, low quality",
        "photomaker_style": "Photographic (Default)"
    },
    "disney": {
        "name": "üè∞ Disney/Pixar",
        "prompt": "disney pixar style, 3d animated character, colorful",
        "negative": "realistic, dark",
        "photomaker_style": "Disney Charactor"
    },
    "digital": {
        "name": "üíª Digital Art",
        "prompt": "digital art style, modern illustration, vibrant",
        "negative": "traditional, sketch",
        "photomaker_style": "Digital Art"
    },
    "neon": {
        "name": "üíú –ù–µ–æ–Ω",
        "prompt": "neon colors, glowing effects, night city, synthwave",
        "negative": "dull, muted colors",
        "photomaker_style": "Neonpunk"
    }
}

class AvatarBot:
    def __init__(self, telegram_token: str, replicate_token: str):
        # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        self.telegram_token = telegram_token.strip()
        replicate_token = replicate_token.strip()
        os.environ["REPLICATE_API_TOKEN"] = replicate_token
        self.user_data: Dict = {}
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
        user = update.effective_user
        
        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        keyboard = [
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (30 —Å–µ–∫)", callback_data="mode_instant")],
            [InlineKeyboardButton("üéØ Pro —Ä–µ–∂–∏–º LoRA (20 –º–∏–Ω)", callback_data="mode_lora")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "üé® –Ø —Å–æ–∑–¥–∞–º –∫—Ä—É—Ç—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å —Ç–≤–æ–∏–º –ª–∏—Ü–æ–º!\n\n"
            "–£ –º–µ–Ω—è –µ—Å—Ç—å –¥–≤–∞ —Ä–µ–∂–∏–º–∞:\n\n"
            "‚ö° **–ë—ã—Å—Ç—Ä—ã–π** - 1 —Ñ–æ—Ç–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ 30 —Å–µ–∫—É–Ω–¥\n"
            "üéØ **Pro (LoRA)** - 5-10 —Ñ–æ—Ç–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏\n\n"
            "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:"
        )
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        return CHOOSING_MODE
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = (
            "ü§ñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
            "   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π - –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ\n"
            "   ‚Ä¢ Pro (LoRA) - –¥–ª—è —Ç–æ—á–Ω–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n\n"
            "2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ:\n"
            "   ‚Ä¢ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ - 1 —á–µ—Ç–∫–æ–µ —Å–µ–ª—Ñ–∏\n"
            "   ‚Ä¢ –î–ª—è Pro - 5-10 —Ä–∞–∑–Ω—ã—Ö —Å–µ–ª—Ñ–∏\n\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å (8 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)\n\n"
            "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ = –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
            "‚Ä¢ –õ–∏—Ü–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ\n"
            "‚Ä¢ –î–ª—è Pro –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã\n\n"
            "/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/styles - –≤—Å–µ —Å—Ç–∏–ª–∏"
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def mode_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "help":
            help_text = (
                "‚ÑπÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤:**\n\n"
                "**‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º:**\n"
                "‚Ä¢ 1 —Ñ–æ—Ç–æ\n"
                "‚Ä¢ 30 —Å–µ–∫—É–Ω–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
                "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
                "‚Ä¢ ~$0.01 –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é\n\n"
                "**üéØ Pro —Ä–µ–∂–∏–º (LoRA):**\n"
                "‚Ä¢ 5-10 —Ñ–æ—Ç–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\n"
                "‚Ä¢ 15-20 –º–∏–Ω—É—Ç –æ–±—É—á–µ–Ω–∏—è\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑\n"
                "‚Ä¢ ~$1-2 –∑–∞ –æ–±—É—á–µ–Ω–∏–µ"
            )
            await query.edit_message_text(help_text, parse_mode='Markdown')
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING_MODE
            
        elif query.data == "back_to_start":
            keyboard = [
                [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (30 —Å–µ–∫)", callback_data="mode_instant")],
                [InlineKeyboardButton("üéØ Pro —Ä–µ–∂–∏–º LoRA (20 –º–∏–Ω)", callback_data="mode_lora")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
            ]
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING_MODE
            
        elif query.data == "mode_instant":
            context.user_data['mode'] = 'instant'
            context.user_data['photos'] = []
            
            await query.edit_message_text(
                "‚ö° **–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º**\n\n"
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞:\n\n"
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                "‚Ä¢ –§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∫—É—Ä—Å –ª—É—á—à–µ\n"
                "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –ß–µ—Ç–∫–æ–µ –ª–∏—Ü–æ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏",
                parse_mode='Markdown'
            )
            return UPLOADING_INSTANT
            
        elif query.data == "mode_lora":
            context.user_data['mode'] = 'lora'
            context.user_data['photos'] = []
            context.user_data['photo_count'] = 0
            
            await query.edit_message_text(
                "üéØ **Pro —Ä–µ–∂–∏–º (LoRA Training)**\n\n"
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 5-10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:\n\n"
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                "‚Ä¢ –†–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã\n"
                "‚Ä¢ –†–∞–∑–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞\n"
                "‚Ä¢ –ß–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ\n\n"
                "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0/10",
                parse_mode='Markdown'
            )
            return UPLOADING_LORA
    
    async def handle_instant_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è Instant ID"""
        try:
            photo = update.message.photo[-1]
            file = await photo.get_file()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            photo_bytes = BytesIO()
            await file.download_to_memory(photo_bytes)
            photo_bytes.seek(0)
            
            context.user_data['photos'] = [photo_bytes]
            
            await update.message.reply_text(
                "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:",
                reply_markup=self._get_styles_keyboard()
            )
            
            return SELECTING_STYLE
            
        except Exception as e:
            logger.error(f"Error handling photo: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n/start"
            )
            return ConversationHandler.END
    
    async def handle_lora_photos(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è LoRA"""
        try:
            photo = update.message.photo[-1]
            file = await photo.get_file()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            photo_bytes = BytesIO()
            await file.download_to_memory(photo_bytes)
            photo_bytes.seek(0)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è LoRA
            photo_base64 = base64.b64encode(photo_bytes.read()).decode('utf-8')
            photo_bytes.seek(0)
            
            if 'photos' not in context.user_data:
                context.user_data['photos'] = []
            if 'photos_base64' not in context.user_data:
                context.user_data['photos_base64'] = []
                
            context.user_data['photos'].append(photo_bytes)
            context.user_data['photos_base64'].append(f"data:image/jpeg;base64,{photo_base64}")
            context.user_data['photo_count'] = len(context.user_data['photos'])
            
            count = context.user_data['photo_count']
            
            if count < 5:
                await update.message.reply_text(
                    f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: {count}/10\n"
                    f"–ú–∏–Ω–∏–º—É–º –Ω—É–∂–Ω–æ –µ—â–µ {5 - count} —Ñ–æ—Ç–æ."
                )
                return UPLOADING_LORA
            elif count < 10:
                keyboard = [
                    [InlineKeyboardButton(f"‚úÖ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ ({count} —Ñ–æ—Ç–æ)", callback_data="lora_ready")],
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="lora_more")]
                ]
                await update.message.reply_text(
                    f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ {count} —Ñ–æ—Ç–æ.\n"
                    "–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return UPLOADING_LORA
            else:
                await update.message.reply_text(
                    "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ 10 —Ñ–æ—Ç–æ! –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...\n"
                    "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 15-20 –º–∏–Ω—É—Ç."
                )
                return await self._start_lora_training(update, context)
                
        except Exception as e:
            logger.error(f"Error handling LoRA photos: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return UPLOADING_LORA
    
    async def handle_lora_decision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–æ—Ç–æ –¥–ª—è LoRA"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "lora_ready":
            await query.edit_message_text(
                "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...\n"
                "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 15-20 –º–∏–Ω—É—Ç.\n"
                "‚òï –ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞ –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ!\n\n"
                "–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ."
            )
            return await self._start_lora_training(update, context)
        elif query.data == "lora_more":
            count = context.user_data.get('photo_count', 0)
            await query.edit_message_text(
                f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ (—Å–µ–π—á–∞—Å {count}/10):"
            )
            return UPLOADING_LORA
    
    def _get_styles_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å—Ç–∏–ª—è–º–∏"""
        keyboard = []
        for style_id, style_info in STYLES.items():
            keyboard.append([InlineKeyboardButton(
                style_info['name'],
                callback_data=f"style_{style_id}"
            )])
        return InlineKeyboardMarkup(keyboard)
    
    async def handle_style_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        style_id = query.data.replace("style_", "")
        context.user_data['selected_style'] = style_id
        style_info = STYLES[style_id]
        
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style_info['name']}\n\n"
            "üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...\n"
            "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30-60 —Å–µ–∫—É–Ω–¥..."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if context.user_data.get('mode') == 'instant':
            return await self._generate_instant_id(update, context)
        else:
            return await self._generate_with_lora(update, context)
    
    async def _generate_instant_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Instant ID (PhotoMaker)"""
        try:
            style_id = context.user_data['selected_style']
            style_info = STYLES[style_id]
            photo = context.user_data['photos'][0]
            
            # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –≤ BytesIO
            photo.seek(0)
            
            logger.info(f"Starting generation for style: {style_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PhotoMaker –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            output = replicate.run(
                "tencentarc/photomaker:ddfc2b08d209f9fa8c1eca692712918bd449f695dabb4a958da31802a9570fe4",
                input={
                    "prompt": f"img, {style_info['prompt']}, high quality, 8k, detailed",
                    "num_steps": 25,
                    "style_name": style_info['photomaker_style'],
                    "input_image": photo,
                    "num_outputs": 2,
                    "guidance_scale": 5,
                    "negative_prompt": f"{style_info['negative']}, ugly, deformed, blurry, low quality"
                }
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if output and len(output) > 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                await update.callback_query.message.reply_photo(
                    photo=output[0],
                    caption=f"‚ú® –í–∞—à –∞–≤–∞—Ç–∞—Ä –≤ —Å—Ç–∏–ª–µ {style_info['name']} –≥–æ—Ç–æ–≤!"
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if len(output) > 1:
                    await update.callback_query.message.reply_photo(
                        photo=output[1],
                        caption="üé® –í–æ—Ç –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç!"
                    )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ—â–µ –æ–ø—Ü–∏–∏
                keyboard = [
                    [InlineKeyboardButton("üé® –î—Ä—É–≥–æ–π —Å—Ç–∏–ª—å", callback_data="more_styles")],
                    [InlineKeyboardButton("üì∏ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ", callback_data="new_photo")],
                    [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
                ]
                
                await update.callback_query.message.reply_text(
                    "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
                logger.info("Generation completed successfully")
            else:
                raise Exception("No output from model")
            
        except Exception as e:
            logger.error(f"Error in generation: {e}")
            error_text = self._get_error_message(e)
            
            await update.callback_query.message.reply_text(
                f"{error_text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏."
            )
        
        return ConversationHandler.END
    
    async def _start_lora_training(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è LoRA"""
        try:
            photos_base64 = context.user_data.get('photos_base64', [])
            
            if not photos_base64:
                raise Exception("No photos for training")
            
            message = await update.callback_query.message.reply_text(
                "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞—á–∞–ª–æ—Å—å...\n"
                "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%\n\n"
                "‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 15-20 –º–∏–Ω—É—Ç"
            )
            
            context.user_data['progress_message'] = message
            
            logger.info(f"Starting LoRA training with {len(photos_base64)} photos")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ LoRA
            training = replicate.trainings.create(
                version="ostris/flux-dev-lora-trainer:4ffd32160efd92e956d39c5338a9b8fbafca58e03f791f6d8011a3e17e1f6c70",
                input={
                    "input_images": photos_base64,
                    "trigger_word": "OHWX",
                    "steps": 1000,
                    "lora_rank": 16,
                    "learning_rate": 0.0004,
                    "caption_dropout_rate": 0.05,
                    "optimizer": "adamw8bit",
                    "autocaption": True,
                    "autocaption_prefix": "OHWX person"
                }
            )
            
            context.user_data['training_id'] = training.id
            logger.info(f"Training started with ID: {training.id}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
            start_time = time.time()
            last_progress = 0
            
            while training.status not in ["succeeded", "failed", "canceled"]:
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                training.reload()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                elapsed_time = int((time.time() - start_time) / 60)
                estimated_progress = min(95, int((elapsed_time / 20) * 100))
                
                if estimated_progress > last_progress + 10:
                    last_progress = estimated_progress
                    try:
                        await message.edit_text(
                            f"üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...\n"
                            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ~{estimated_progress}%\n"
                            f"‚è± –ü—Ä–æ—à–ª–æ: {elapsed_time} –º–∏–Ω—É—Ç\n\n"
                            f"–°—Ç–∞—Ç—É—Å: {training.status}"
                        )
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                
                # –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
                if elapsed_time > 30:
                    raise Exception("Training timeout")
            
            if training.status == "succeeded":
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                context.user_data['lora_model'] = training.output
                
                await message.edit_text(
                    "‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
                    reply_markup=self._get_styles_keyboard()
                )
                
                logger.info(f"Training completed: {training.output}")
                return SELECTING_STYLE
                
            else:
                raise Exception(f"Training failed: {training.status}")
            
        except Exception as e:
            logger.error(f"Error in LoRA training: {e}")
            await update.callback_query.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {str(e)[:200]}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º.\n"
                "/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
            )
            return ConversationHandler.END
    
    async def _generate_with_lora(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –æ–±—É—á–µ–Ω–Ω–æ–π LoRA –º–æ–¥–µ–ª—å—é"""
        try:
            style_id = context.user_data['selected_style']
            style_info = STYLES[style_id]
            lora_model = context.user_data.get('lora_model')
            
            if not lora_model:
                raise Exception("LoRA model not found")
            
            logger.info(f"Generating with LoRA model: {lora_model}")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—É—á–µ–Ω–Ω–æ–π LoRA
            output = replicate.run(
                lora_model,
                input={
                    "prompt": f"OHWX person, {style_info['prompt']}, masterpiece, best quality",
                    "negative_prompt": f"{style_info['negative']}, ugly, deformed",
                    "num_inference_steps": 30,
                    "guidance_scale": 7.5,
                    "width": 1024,
                    "height": 1024,
                    "num_outputs": 2
                }
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if output:
                for i, img_url in enumerate(output[:2], 1):
                    await update.callback_query.message.reply_photo(
                        photo=img_url,
                        caption=f"‚ú® –í–∞—Ä–∏–∞–Ω—Ç {i} –≤ —Å—Ç–∏–ª–µ {style_info['name']}"
                    )
                
                await update.callback_query.message.reply_text(
                    "üéâ –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞!\n"
                    "–ú–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç–∏–ª–∏ –∏–ª–∏ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞."
                )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ—â–µ –æ–ø—Ü–∏–∏
                keyboard = [
                    [InlineKeyboardButton("üé® –î—Ä—É–≥–æ–π —Å—Ç–∏–ª—å", callback_data="more_styles_lora")],
                    [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
                ]
                
                await update.callback_query.message.reply_text(
                    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            
        except Exception as e:
            logger.error(f"Error in LoRA generation: {e}")
            await update.callback_query.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)[:200]}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        
        return ConversationHandler.END
    
    async def handle_more_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        query = update.callback_query
        await query.answer()
        
        if query.data in ["more_styles", "more_styles_lora"]:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ —Å–Ω–æ–≤–∞
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å:",
                reply_markup=self._get_styles_keyboard()
            )
            return SELECTING_STYLE
            
        elif query.data == "new_photo":
            context.user_data['photos'] = []
            await query.edit_message_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:"
            )
            return UPLOADING_INSTANT
            
        elif query.data == "restart":
            # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            keyboard = [
                [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="mode_instant")],
                [InlineKeyboardButton("üéØ Pro —Ä–µ–∂–∏–º (LoRA)", callback_data="mode_lora")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
            ]
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING_MODE
    
    def _get_error_message(self, error):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        error_str = str(error).lower()
        
        if "billing" in error_str or "payment" in error_str:
            return "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ Replicate"
        elif "api" in error_str or "token" in error_str:
            return "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å API —Ç–æ–∫–µ–Ω–æ–º"
        elif "rate" in error_str:
            return "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É"
        elif "timeout" in error_str:
            return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞: {error_str[:100]}"
    
    async def show_styles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏"""
        styles_text = "üé® **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:**\n\n"
        for style_id, style_info in STYLES.items():
            styles_text += f"{style_info['name']}\n"
        
        styles_text += "\n8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è –≤–∞—à–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
        
        await update.message.reply_text(styles_text, parse_mode='Markdown')
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        return ConversationHandler.END
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = Application.builder().token(self.telegram_token).build()
            
            # –°–æ–∑–¥–∞–µ–º ConversationHandler
            conv_handler = ConversationHandler(
                entry_points=[CommandHandler("start", self.start)],
                states={
                    CHOOSING_MODE: [
                        CallbackQueryHandler(self.mode_selection)
                    ],
                    UPLOADING_INSTANT: [
                        MessageHandler(filters.PHOTO, self.handle_instant_photo),
                        CallbackQueryHandler(self.handle_more_actions)
                    ],
                    UPLOADING_LORA: [
                        MessageHandler(filters.PHOTO, self.handle_lora_photos),
                        CallbackQueryHandler(self.handle_lora_decision)
                    ],
                    SELECTING_STYLE: [
                        CallbackQueryHandler(self.handle_style_selection)
                    ],
                    WAITING_LORA: [
                        CallbackQueryHandler(self.handle_style_selection)
                    ]
                },
                fallbacks=[
                    CommandHandler("cancel", self.cancel),
                    CallbackQueryHandler(self.handle_more_actions)
                ],
                per_message=False  # –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã CommandHandler
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(conv_handler)
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("styles", self.show_styles))
            
            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            async def test_cmd(update, context):
                await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            application.add_handler(CommandHandler("test", test_cmd))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("Starting bot polling...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            
        except Exception as e:
            logger.error(f"Failed to start bot: {e}")
            raise

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    import sys
    from dotenv import load_dotenv
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –æ—á–∏—â–∞–µ–º –∏—Ö
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
    REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN", "").strip()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    TELEGRAM_BOT_TOKEN = ''.join(c for c in TELEGRAM_BOT_TOKEN if c.isprintable())
    REPLICATE_API_TOKEN = ''.join(c for c in REPLICATE_API_TOKEN if c.isprintable())
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    if not TELEGRAM_BOT_TOKEN or not REPLICATE_API_TOKEN:
        logger.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã!")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ REPLICATE_API_TOKEN")
        sys.exit(1)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ Telegram
    if ':' not in TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_BOT_TOKEN!")
        sys.exit(1)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤
    safe_tg = f"{TELEGRAM_BOT_TOKEN.split(':')[0]}:***"
    safe_rep = f"{REPLICATE_API_TOKEN[:4]}...{REPLICATE_API_TOKEN[-4:]}" if len(REPLICATE_API_TOKEN) > 8 else "***"
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot = AvatarBot(TELEGRAM_BOT_TOKEN, REPLICATE_API_TOKEN)
        
        logger.info("="*50)
        logger.info("ü§ñ Telegram Avatar Bot v2.0")
        logger.info("="*50)
        logger.info(f"‚úÖ Telegram Token: {safe_tg}")
        logger.info(f"‚úÖ Replicate Token: {safe_rep}")
        logger.info("üöÄ Starting bot on Railway...")
        logger.info("="*50)
        
        bot.run()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
