import os
import asyncio
import logging
from typing import Dict, List, Optional
from datetime import datetime
import json
import aiohttp
from io import BytesIO

# Telegram imports
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

# Replicate import
import replicate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    CHOOSING_MODE,
    UPLOADING_INSTANT,
    UPLOADING_LORA,
    SELECTING_STYLE,
    GENERATING
) = range(5)

# –°—Ç–∏–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
STYLES = {
    "cyberpunk": {
        "name": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
        "prompt": "cyberpunk style, neon lights, futuristic, tech wear, holographic effects",
        "negative": "boring, plain, old-fashioned"
    },
    "anime": {
        "name": "üéå –ê–Ω–∏–º–µ",
        "prompt": "anime style, manga art, cel shading, vibrant colors, large expressive eyes",
        "negative": "realistic, photographic, western cartoon"
    },
    "fantasy": {
        "name": "üßô –§—ç–Ω—Ç–µ–∑–∏",
        "prompt": "fantasy art, magical, ethereal, mystical lighting, epic character",
        "negative": "modern, mundane, ordinary"
    },
    "superhero": {
        "name": "ü¶∏ –°—É–ø–µ—Ä–≥–µ—Ä–æ–π",
        "prompt": "superhero style, dynamic pose, dramatic lighting, powerful, comic book art",
        "negative": "weak, ordinary, civilian clothes"
    },
    "portrait": {
        "name": "üé® –ê—Ä—Ç-–ø–æ—Ä—Ç—Ä–µ—Ç",
        "prompt": "artistic portrait, professional lighting, high quality, masterpiece",
        "negative": "amateur, low quality, blurry"
    },
    "pixar": {
        "name": "üé¨ Pixar —Å—Ç–∏–ª—å",
        "prompt": "3D pixar style, cute, rounded features, colorful, animated character",
        "negative": "realistic, dark, horror"
    },
    "viking": {
        "name": "‚öîÔ∏è –í–∏–∫–∏–Ω–≥",
        "prompt": "viking warrior, norse mythology, epic beard, battle armor, fierce",
        "negative": "modern, weak, clean-shaven"
    },
    "steampunk": {
        "name": "‚öôÔ∏è –°—Ç–∏–º–ø–∞–Ω–∫",
        "prompt": "steampunk style, victorian era, brass goggles, mechanical gears, vintage",
        "negative": "modern, digital, minimalist"
    }
}

class AvatarBot:
    def __init__(self, telegram_token: str, replicate_token: str):
        self.telegram_token = telegram_token
        os.environ["REPLICATE_API_TOKEN"] = replicate_token
        self.user_data: Dict = {}
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
        user = update.effective_user
        
        keyboard = [
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (Instant ID)", callback_data="mode_instant")],
            [InlineKeyboardButton("üéØ Pro —Ä–µ–∂–∏–º (LoRA Training)", callback_data="mode_lora")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∫—Ä—É—Ç—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å —Ç–≤–æ–∏–º –ª–∏—Ü–æ–º! üé®\n\n"
            "–£ –º–µ–Ω—è –µ—Å—Ç—å –¥–≤–∞ —Ä–µ–∂–∏–º–∞:\n"
            "‚ö° **–ë—ã—Å—Ç—Ä—ã–π** - –∑–∞–≥—Ä—É–∑–∏ 1 —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –º–∏–Ω—É—Ç—É\n"
            "üéØ **Pro** - –∑–∞–≥—Ä—É–∑–∏ 5-10 —Å–µ–ª—Ñ–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ (15-20 –º–∏–Ω—É—Ç)\n\n"
            "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:"
        )
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        return CHOOSING_MODE
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = (
            "ü§ñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
            "   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π (Instant ID) - –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ\n"
            "   ‚Ä¢ Pro (LoRA) - –¥–ª—è —Ç–æ—á–Ω–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n\n"
            "2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ:\n"
            "   ‚Ä¢ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞ - 1 —á–µ—Ç–∫–æ–µ —Å–µ–ª—Ñ–∏\n"
            "   ‚Ä¢ –î–ª—è Pro —Ä–µ–∂–∏–º–∞ - 5-10 —Ä–∞–∑–Ω—ã—Ö —Å–µ–ª—Ñ–∏\n\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n\n"
            "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º\n"
            "‚Ä¢ –õ–∏—Ü–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ\n"
            "‚Ä¢ –î–ª—è Pro —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n\n"
            "/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/styles - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Ç–∏–ª–∏"
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def mode_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "help":
            help_text = (
                "‚ÑπÔ∏è **–û —Ä–µ–∂–∏–º–∞—Ö:**\n\n"
                "**–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (Instant ID):**\n"
                "‚Ä¢ –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ñ–æ—Ç–æ\n"
                "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞ 30-60 —Å–µ–∫—É–Ω–¥\n"
                "‚Ä¢ –•–æ—Ä–æ—à–æ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫\n\n"
                "**Pro —Ä–µ–∂–∏–º (LoRA):**\n"
                "‚Ä¢ –ù—É–∂–Ω–æ 5-10 —Ñ–æ—Ç–æ\n"
                "‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ 15-20 –º–∏–Ω—É—Ç\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ\n"
                "‚Ä¢ –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑"
            )
            await query.edit_message_text(help_text, parse_mode='Markdown')
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING_MODE
            
        elif query.data == "back_to_start":
            return await self.start(update, context)
            
        elif query.data == "mode_instant":
            context.user_data['mode'] = 'instant'
            context.user_data['photos'] = []
            
            await query.edit_message_text(
                "‚ö° **–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–Ω–æ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞.\n"
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                "‚Ä¢ –§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∫—É—Ä—Å\n"
                "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞",
                parse_mode='Markdown'
            )
            return UPLOADING_INSTANT
            
        elif query.data == "mode_lora":
            context.user_data['mode'] = 'lora'
            context.user_data['photos'] = []
            context.user_data['photo_count'] = 0
            
            await query.edit_message_text(
                "üéØ **Pro —Ä–µ–∂–∏–º (LoRA Training)**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ 5-10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n"
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                "‚Ä¢ –†–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n"
                "‚Ä¢ –ß–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞\n"
                "‚Ä¢ –†–∞–∑–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è\n\n"
                "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0/10",
                parse_mode='Markdown'
            )
            return UPLOADING_LORA
    
    async def handle_instant_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è Instant ID"""
        photo = update.message.photo[-1]
        file = await photo.get_file()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo_bytes = BytesIO()
        await file.download_to_memory(photo_bytes)
        photo_bytes.seek(0)
        
        context.user_data['photos'] = [photo_bytes]
        
        await update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=self._get_styles_keyboard()
        )
        
        return SELECTING_STYLE
    
    async def handle_lora_photos(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è LoRA"""
        photo = update.message.photo[-1]
        file = await photo.get_file()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo_bytes = BytesIO()
        await file.download_to_memory(photo_bytes)
        photo_bytes.seek(0)
        
        context.user_data['photos'].append(photo_bytes)
        context.user_data['photo_count'] = len(context.user_data['photos'])
        
        count = context.user_data['photo_count']
        
        if count < 5:
            await update.message.reply_text(
                f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: {count}/10\n"
                f"–ú–∏–Ω–∏–º—É–º –Ω—É–∂–Ω–æ –µ—â–µ {5 - count} —Ñ–æ—Ç–æ."
            )
            return UPLOADING_LORA
        elif count < 10:
            keyboard = [
                [InlineKeyboardButton(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ({count} —Ñ–æ—Ç–æ)", callback_data="lora_ready")],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="lora_more")]
            ]
            await update.message.reply_text(
                f"–ü–æ–ª—É—á–µ–Ω–æ {count} —Ñ–æ—Ç–æ.\n"
                "–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return UPLOADING_LORA
        else:
            await update.message.reply_text(
                "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –º–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ (10)! –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...\n"
                "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 15-20 –º–∏–Ω—É—Ç."
            )
            # –ó–¥–µ—Å—å –Ω–∞—á–Ω–µ—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ LoRA
            return await self._start_lora_training(update, context)
    
    async def handle_lora_decision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–æ—Ç–æ –¥–ª—è LoRA"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "lora_ready":
            await query.edit_message_text(
                "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...\n"
                "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 15-20 –º–∏–Ω—É—Ç.\n"
                "‚òï –ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞ –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ!"
            )
            return await self._start_lora_training(update, context)
        elif query.data == "lora_more":
            count = context.user_data['photo_count']
            await query.edit_message_text(
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ (—Å–µ–π—á–∞—Å {count}/10):"
            )
            return UPLOADING_LORA
    
    def _get_styles_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å—Ç–∏–ª—è–º–∏"""
        keyboard = []
        for style_id, style_info in STYLES.items():
            keyboard.append([InlineKeyboardButton(
                style_info['name'],
                callback_data=f"style_{style_id}"
            )])
        return InlineKeyboardMarkup(keyboard)
    
    async def handle_style_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        style_id = query.data.replace("style_", "")
        context.user_data['selected_style'] = style_id
        style_info = STYLES[style_id]
        
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style_info['name']}\n\n"
            "üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...\n"
            "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30-60 —Å–µ–∫—É–Ω–¥..."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if context.user_data['mode'] == 'instant':
            return await self._generate_instant_id(update, context)
        else:
            return await self._generate_with_lora(update, context)
    
    async def _generate_instant_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Instant ID"""
        try:
            style_id = context.user_data['selected_style']
            style_info = STYLES[style_id]
            photo = context.user_data['photos'][0]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º InstantID –º–æ–¥–µ–ª—å –Ω–∞ Replicate
            output = replicate.run(
                "zsxkib/instant-id:083c93de8c45af26c3d598bba35d2b6d4c64fff10cb3e23b33ec01ba1bc088ef",
                input={
                    "image": photo,
                    "prompt": f"{style_info['prompt']}, professional avatar, high quality, detailed",
                    "negative_prompt": f"{style_info['negative']}, ugly, deformed, blurry",
                    "guidance_scale": 7.5,
                    "num_inference_steps": 30,
                    "seed": -1
                }
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if output:
                await update.callback_query.message.reply_photo(
                    photo=output[0],
                    caption=f"‚ú® –í–∞—à –∞–≤–∞—Ç–∞—Ä –≤ —Å—Ç–∏–ª–µ {style_info['name']} –≥–æ—Ç–æ–≤!\n\n"
                           f"–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ—â–µ —Å—Ç–∏–ª–∏
            keyboard = [
                [InlineKeyboardButton("üé® –î—Ä—É–≥–æ–π —Å—Ç–∏–ª—å", callback_data="more_styles")],
                [InlineKeyboardButton("üîÑ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ", callback_data="new_photo")],
                [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
            ]
            
            await update.callback_query.message.reply_text(
                "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error in Instant ID generation: {e}")
            await update.callback_query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
        
        return ConversationHandler.END
    
    async def _start_lora_training(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è LoRA"""
        try:
            photos = context.user_data['photos']
            
            # –°–æ–∑–¥–∞–µ–º zip –∞—Ä—Ö–∏–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å zip-—Ñ–∞–π–ª
            
            message = await update.callback_query.message.reply_text(
                "üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞—á–∞–ª–æ—Å—å...\n"
                "–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ LoRA –Ω–∞ Replicate
            training = replicate.trainings.create(
                version="ostris/flux-dev-lora-trainer:4ffd32160efd92e956d39c5338a9b8fbafca58e03f791f6d8011a3e17e1f6c70",
                input={
                    "input_images": photos,  # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å URL –∫ zip-–∞—Ä—Ö–∏–≤—É
                    "trigger_word": "TOK",
                    "steps": 1000,
                    "learning_rate": 0.0004,
                }
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
            while training.status != "succeeded":
                await asyncio.sleep(30)
                training.reload()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if hasattr(training, 'logs'):
                    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –ª–æ–≥–æ–≤
                    progress = self._parse_progress(training.logs)
                    await message.edit_text(
                        f"üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...\n"
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%"
                    )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            context.user_data['lora_model'] = training.output
            
            await message.edit_text(
                "‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
                reply_markup=self._get_styles_keyboard()
            )
            
            return SELECTING_STYLE
            
        except Exception as e:
            logger.error(f"Error in LoRA training: {e}")
            await update.callback_query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
            return ConversationHandler.END
    
    async def _generate_with_lora(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –æ–±—É—á–µ–Ω–Ω–æ–π LoRA –º–æ–¥–µ–ª—å—é"""
        try:
            style_id = context.user_data['selected_style']
            style_info = STYLES[style_id]
            lora_model = context.user_data.get('lora_model')
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—É—á–µ–Ω–Ω–æ–π LoRA
            output = replicate.run(
                lora_model,
                input={
                    "prompt": f"TOK person, {style_info['prompt']}, masterpiece",
                    "negative_prompt": style_info['negative'],
                    "num_inference_steps": 50,
                    "guidance_scale": 7.5,
                    "width": 1024,
                    "height": 1024,
                    "num_outputs": 2
                }
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            media_group = []
            for img_url in output[:2]:
                media_group.append(InputMediaPhoto(img_url))
            
            await update.callback_query.message.reply_media_group(media_group)
            await update.callback_query.message.reply_text(
                f"‚ú® –í–∞—à–∏ –∞–≤–∞—Ç–∞—Ä—ã –≤ —Å—Ç–∏–ª–µ {style_info['name']} –≥–æ—Ç–æ–≤—ã!\n"
                f"–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—Å –∏ –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç–∏–ª–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞."
            )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ—â–µ –æ–ø—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("üé® –î—Ä—É–≥–æ–π —Å—Ç–∏–ª—å", callback_data="more_styles_lora")],
                [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
            ]
            
            await update.callback_query.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –µ—â–µ?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error in LoRA generation: {e}")
            await update.callback_query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        
        return ConversationHandler.END
    
    def _parse_progress(self, logs: str) -> int:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ –ª–æ–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if "step" in logs:
            lines = logs.split('\n')
            for line in reversed(lines):
                if "step" in line:
                    try:
                        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤–∏–¥–∞ "step 500/1000"
                        parts = line.split()
                        for i, part in enumerate(parts):
                            if part == "step" and i + 1 < len(parts):
                                step_info = parts[i + 1]
                                if "/" in step_info:
                                    current, total = step_info.split("/")
                                    return int((int(current) / int(total)) * 100)
                    except:
                        pass
        return 0
    
    async def show_styles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏"""
        styles_text = "üé® **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:**\n\n"
        for style_id, style_info in STYLES.items():
            styles_text += f"{style_info['name']}\n"
        
        styles_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!"
        
        await update.message.reply_text(styles_text, parse_mode='Markdown')
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        return ConversationHandler.END
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.telegram_token).build()
        
        # –°–æ–∑–¥–∞–µ–º ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.start)],
            states={
                CHOOSING_MODE: [
                    CallbackQueryHandler(self.mode_selection)
                ],
                UPLOADING_INSTANT: [
                    MessageHandler(filters.PHOTO, self.handle_instant_photo)
                ],
                UPLOADING_LORA: [
                    MessageHandler(filters.PHOTO, self.handle_lora_photos),
                    CallbackQueryHandler(self.handle_lora_decision)
                ],
                SELECTING_STYLE: [
                    CallbackQueryHandler(self.handle_style_selection)
                ]
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(conv_handler)
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("styles", self.show_styles))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
if __name__ == "__main__":
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
    TELEGRAM_BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
    REPLICATE_API_TOKEN = "YOUR_REPLICATE_API_TOKEN"
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = AvatarBot(TELEGRAM_BOT_TOKEN, REPLICATE_API_TOKEN)
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.run()
